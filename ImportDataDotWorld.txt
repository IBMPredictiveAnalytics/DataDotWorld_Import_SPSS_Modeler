
##
# Authors: Amod Upadhye, Deepak Rangarao
# Purpose: SPSS Extension to import Data.World content. High level steps include:
# - Authenticate users with Data.World authentication token 
# - Using the Data.World dataset URL and SQL SELECT (with or without parameters) as input, import Data.World content
# - Create data dictionary for Data.World content and push data to SPSS Statistics dataset
##

entered_token<-"%%datadotworld_auth%%"
dw_dataset_url<-"%%datadotworld_url%%"
dw_sql_string<-"%%datadotworld_sql%%"

trim <- function (x) gsub("^\\s+|\\s+$", "", x)

# Function to authenticate to Data.World using authentication token

datadotworldauthenticate<-function() {
        # Use datadotworld properties file to read the authentication token and validate 
        env_properties<-read.properties("datadotworld.properties", fields = NULL, encoding = "UTF-8")
        auth_token<-trim(env_properties$AUTHENTICATION_TOKEN)
        auth_token<-noquote(auth_token)
        print(paste("Found authentication token, ",auth_token)) 
        configure(auth_token=auth_token)
        get_user()
}

# Function to check and install required R packages from CRAN
packages<-function(x){
    x <- as.character(match.call()[[2]])
    if (!require(x,character.only=TRUE)){
       print("need to install packages")
       install.packages(pkgs=x,repos="http://cran.r-project.org",type="source")
       require(x,character.only=TRUE)
    }
}

getMetaData <- function (data) {
  if( is.null(dim(data)))
    stop("Invalid data received: not a data.frame")
  if (dim(data)[1]<=0) {
    print("Warning : modelerData has no line, all fieldStorage fields set to strings")
    getStorage <- function(x){return("string")}
  } else {
    getStorage <- function(x) {
      x <- unlist(x)
      res <- NULL
      #if x is a factor, typeof will return an integer so we treat the case on the side
      if(is.factor(x)) {
        res <- "string"
      } else {
        res <- switch(typeof(x),
                      integer="integer",
                      double = "real",
                      "string")
      }
      return (res)
    }
  }
  col = vector("list", dim(data)[2])
  for (i in 1:dim(data)[2]) {
    col[[i]] <- c(fieldName=names(data[i]),
                  fieldLabel="",
                  fieldStorage=getStorage(data[i]),
                  fieldMeasure="",
                  fieldFormat="",
                  fieldRole="")
  }
  mdm<-do.call(cbind,col)
  mdm<-data.frame(mdm)

  return(mdm)
}

# Function to connect to Data.World and execute the SQL SELECT for a given dataset
connect_dw<-function(dw_dataset_url, dw_sql_string){
    # Connect to data.world and download dataset
    sql_tibble <- sql(dataset=dw_dataset_url,query= dw_sql_string)
    sql_df <- as.data.frame(sql_tibble)
    return(sql_df) 
}

setwd(R.home())

# Load required R packages
packages("data.world")
packages("dwapi")
packages("properties")
    
# Read Data.World authentication token and authenticate
print(paste("Looking for Data.World configuration file at ", getwd()))

if(file.exists("datadotworld.properties"))
{
    # Authenticate to data.world
    datadotworldauthenticate()
    #dataworld_import()
} else if(entered_token != "DATADOTWORLD_AUTHENTICATION_TOKEN")
{
    # Create datadotworld.properties file
    fileConn<-file("datadotworld.properties")
    writeLines(c(paste("AUTHENTICATION_TOKEN=",trim(entered_token))), fileConn)
    close(fileConn)
    # Authenticate to data.world
    datadotworldauthenticate()
    #dataworld_import()
} else {
    print("Please enter a valid Data.World authentication token in this screen,")
    print("Alternative place a datadotworld.properties file with one property AUTHENTICATION_TOKEN=<YOUR_DATADOTWORLD_AUTHENTICATION_TOKEN> at the following location")
    print(getwd())
}


# Connect and retrieve data from Data.World  

modelerData <- connect_dw(dw_dataset_url, dw_sql_string)
head(modelerData)
modelerDataModel <- getMetaData(modelerData)
